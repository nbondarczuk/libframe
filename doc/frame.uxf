<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>210</y>
      <w>380</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::FrameImlp
--
-level: unsingned int
-label: String
-pid: String
-thread_id: String
--
FrameImpl(frame_label: String&amp;)
~FrameImp()
trace(message: String&amp;, status: MessageStatus = INFO)
--
Responsibilities
-- Imlementation of frame trace
-- Uses logger to produce info</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>140</x>
      <y>0</y>
      <w>100</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>&lt;&lt;adapter&gt;&gt;
log::Frame
--
Enter()
Trace()
Leave()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>180</x>
      <y>120</y>
      <w>110</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
implements</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>460</x>
      <y>460</y>
      <w>360</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::LoggerImpl
--
message_queue: MessageQueue&amp;
--
LoggerImpl(message_queue: MessageQueue&amp;)
~LoggerImpl()
void info(message: String&amp;)
void debug(message: String&amp;)
void warning(message: String&amp;)
void error(message: String&amp;)
void send(message: Message&amp;)
--
Responsibilities
-- Provides generic logger implementation</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>590</x>
      <y>270</y>
      <w>100</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>log::Logger
--
Info()
Debug()
Warning()
Error()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>460</x>
      <y>730</y>
      <w>360</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>log::Message
--
-status: MessageStatus
-ts: TimeStamp
-text: String
--
Message(value: String&amp;, is_error: bool = false)
String&amp; dump()
--
Responsibilities
-- Log messagge container with status as FAILURE
or other legitimate values</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>390</y>
      <w>110</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
implements</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>370</x>
      <y>320</y>
      <w>240</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>220.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>820</y>
      <w>340</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::PThreadMessageQueueImpl
--
-mutex_not_empty: PThreadMutexPtr
-cond_not_empty: PThreadCondPtr
-message_queue: std::queue&lt;log::Message&gt;
--
PThreadMessageQueueImpl()
~PThreadMessageQueueImpl()
put(Message&amp;)
Message get()
--
Responsibilities
-- handles message queue implementation
using local pthread queues</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>1200</x>
      <y>530</y>
      <w>160</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>&lt;&lt;facade&gt;&gt;
log::MessageQueue
--
put()
get()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>810</x>
      <y>570</y>
      <w>390</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>370.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>810</x>
      <y>810</y>
      <w>110</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
stores</panel_attributes>
    <additional_attributes>10.0;20.0;90.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>670</y>
      <w>90</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
produces</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>950</y>
      <w>310</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::PThreadLogSinkImpl
--
--
PThreadSinkImpl()
~PThreadSinkImpl()
void loop()
Message next()
void on_message(Function f)
--
Responsibilities
-- generic sink polling the message queue 
using local pthread queues
it calls the handler provided</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>890</y>
      <w>100</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
consumes</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>680</x>
      <y>960</y>
      <w>240</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>220.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>570</x>
      <y>940</y>
      <w>120</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>LogSink
--
Message next()
void loop()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>300</x>
      <y>960</y>
      <w>280</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
implements</panel_attributes>
    <additional_attributes>260.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1320</x>
      <y>820</y>
      <w>360</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::NetAsioMessageQueueImpl
--
-client_endpoint: NetEndpoint
--
NetAsioMessageQueueImpl(address: NetAddress&amp;)
~NetAsioMessageQueueImpl()
put(message: const Message&amp;)
Message get()
--
Responsibilities
-- handles message queue implementation
using remote server communicating with it
by IP sockets</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1060</x>
      <y>630</y>
      <w>170</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>150.0;10.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1340</x>
      <y>630</y>
      <w>180</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;190.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>1100</y>
      <w>340</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>log::NetAsioMessageQueueServer
--
-server_endpoint: NetEndpoint
-server_message_queue: MessageQueue
-server_sink: LogSinkPtr
-signal_observers: vector&lt;SignalObserver&gt;
-server_state: ServerState
--
MessageQueueIPServer()
~MessageQueueIPServer()
void start()
void stop()
void add_observer(signal_id: unsigned_int)
--
Responsibilities
-- IP messaging server providing open
socket for messages from remote clients</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>680</x>
      <y>990</y>
      <w>440</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>10.0;10.0;420.0;180.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1270</x>
      <y>640</y>
      <w>60</w>
      <h>480</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;460.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>610</y>
      <w>360</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>log::MessageStatus: enum
FAILURE
INFO
DEBUG
WARNING
ERROR</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>740</y>
      <w>360</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>log::TimeStamp
--
-value: time_t
-label: String
--
TimeStamp(format: String = "YYYYMMDDHHMISSNS")
String value()
String now()
--
Responsibilities
-- Provides current time stamp in specific format</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>350</x>
      <y>670</y>
      <w>130</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>350</x>
      <y>740</y>
      <w>130</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1560</x>
      <y>1140</y>
      <w>310</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>log::NetEndpoint
--
net_endpoint_address: NetAddress
--
NetEndpoint(address: NetAddress)
--
Responsibilities
-- encapsulates the IP socket info</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1430</x>
      <y>1130</y>
      <w>150</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>130.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1610</x>
      <y>1020</y>
      <w>60</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1410</x>
      <y>1020</y>
      <w>90</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
connects</panel_attributes>
    <additional_attributes>10.0;80.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1980</x>
      <y>1140</y>
      <w>310</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>log::NetAddress
--
ip_address_host: String
ip_address_port: unsigned short
--
NetAddress(host: String&amp;, port: unsigned short)
--
Responsibilities
-- encapsulates the IP 4 or 6 address info</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1860</x>
      <y>1150</y>
      <w>140</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>120.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>660</x>
      <y>1560</y>
      <w>340</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::SignalObserverUsr1Impl
--
--
SignalObserverUsr1Impl()
~SignalObserverUsr1Impl()
register()
--
Responsibilities
-- blocks signal and triggers subject state</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLInterface</id>
    <coordinates>
      <x>1200</x>
      <y>1410</y>
      <w>120</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>SignalObserver
--
handle()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1090</x>
      <y>1560</y>
      <w>340</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::SignalObserverUsr2Impl
--
--
SignalObserverUsr2Impl()
~SignalObserverUsr2Impl()
register()
--
Responsibilities
-- blocks signal and triggers subject state</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1510</x>
      <y>1560</y>
      <w>340</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::SignalObserverQuitImpl
--
--
SignalObserverQuitImpl()
~SignalObserverQuitImpl()
register()
--
Responsibilities
-- blocks signal and triggers subject state</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>540</x>
      <y>1370</y>
      <w>340</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>&lt;&lt;factory&gt;&gt;
log::SignalObserverFactory
--
--
static SignalObserverPtr create(signal: Signal)
--
Responsibilities
-- creates specific signal observer</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>1480</y>
      <w>110</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
implements</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>810</x>
      <y>1470</y>
      <w>430</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
implements</panel_attributes>
    <additional_attributes>410.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1300</x>
      <y>1470</y>
      <w>410</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
implements</panel_attributes>
    <additional_attributes>10.0;10.0;390.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>1400</y>
      <w>360</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>340.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1560</x>
      <y>1280</y>
      <w>360</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>log::ServerState: enum
STARTING
RUNNING
STOPPED
FINISHING</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1430</x>
      <y>1190</y>
      <w>150</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>130.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1400</y>
      <w>310</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::PThreadLogSinkFileImpl
--
--
PThreadSinkImpl(file_name: const String&amp;)
~PThreadSinkImpl()
void loop()
Message next()
--
Responsibilities
-- polling the message queue using 
local pthread queues and writes to the file</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>300</x>
      <y>1010</y>
      <w>290</w>
      <h>430</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
implements</panel_attributes>
    <additional_attributes>270.0;10.0;10.0;410.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>1180</y>
      <w>310</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>&lt;&lt;impl&gt;&gt;
log::PThreadLogSinkMongoDbImpl
--
--
PThreadSinkImpl(schema_name: const String&amp;)
~PThreadSinkImpl()
void loop()
Message next()
--
Responsibilities
-- polling the message queue using 
local pthread queues and writes to
te persistend collection in mongo db</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>300</x>
      <y>990</y>
      <w>280</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
implements</panel_attributes>
    <additional_attributes>260.0;10.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1250</x>
      <y>1340</y>
      <w>60</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
uses</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>690</x>
      <y>1210</y>
      <w>430</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
calls</panel_attributes>
    <additional_attributes>10.0;160.0;410.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>540</x>
      <y>1160</y>
      <w>340</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>&lt;&lt;factory&gt;&gt;
log::LogSinkFactory
--
--
static LogSinkPtr create()
--
Responsibilities
-- creates specific log sink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>670</x>
      <y>1010</y>
      <w>80</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
creates</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>1170</y>
      <w>250</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
calls</panel_attributes>
    <additional_attributes>10.0;20.0;230.0;20.0</additional_attributes>
  </element>
</diagram>
